// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/logistics.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogisticsService_ProcessOrder_FullMethodName   = "/logistics.LogisticsService/ProcessOrder"
	LogisticsService_TrackPackage_FullMethodName   = "/logistics.LogisticsService/TrackPackage"
	LogisticsService_ReportDelivery_FullMethodName = "/logistics.LogisticsService/ReportDelivery"
)

// LogisticsServiceClient is the client API for LogisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para manejar las operaciones de logística
type LogisticsServiceClient interface {
	// Procesar una nueva orden de suministro
	ProcessOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// Consultar el estado de un paquete
	TrackPackage(ctx context.Context, in *TrackingRequest, opts ...grpc.CallOption) (*TrackingResponse, error)
	// Reportar el resultado de una entrega (se usaría entre caravanas y Konzu)
	ReportDelivery(ctx context.Context, in *DeliveryReport, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type logisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsServiceClient(cc grpc.ClientConnInterface) LogisticsServiceClient {
	return &logisticsServiceClient{cc}
}

func (c *logisticsServiceClient) ProcessOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, LogisticsService_ProcessOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) TrackPackage(ctx context.Context, in *TrackingRequest, opts ...grpc.CallOption) (*TrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackingResponse)
	err := c.cc.Invoke(ctx, LogisticsService_TrackPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) ReportDelivery(ctx context.Context, in *DeliveryReport, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LogisticsService_ReportDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticsServiceServer is the server API for LogisticsService service.
// All implementations must embed UnimplementedLogisticsServiceServer
// for forward compatibility.
//
// Servicio para manejar las operaciones de logística
type LogisticsServiceServer interface {
	// Procesar una nueva orden de suministro
	ProcessOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	// Consultar el estado de un paquete
	TrackPackage(context.Context, *TrackingRequest) (*TrackingResponse, error)
	// Reportar el resultado de una entrega (se usaría entre caravanas y Konzu)
	ReportDelivery(context.Context, *DeliveryReport) (*emptypb.Empty, error)
	mustEmbedUnimplementedLogisticsServiceServer()
}

// UnimplementedLogisticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogisticsServiceServer struct{}

func (UnimplementedLogisticsServiceServer) ProcessOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOrder not implemented")
}
func (UnimplementedLogisticsServiceServer) TrackPackage(context.Context, *TrackingRequest) (*TrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackPackage not implemented")
}
func (UnimplementedLogisticsServiceServer) ReportDelivery(context.Context, *DeliveryReport) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDelivery not implemented")
}
func (UnimplementedLogisticsServiceServer) mustEmbedUnimplementedLogisticsServiceServer() {}
func (UnimplementedLogisticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeLogisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsServiceServer will
// result in compilation errors.
type UnsafeLogisticsServiceServer interface {
	mustEmbedUnimplementedLogisticsServiceServer()
}

func RegisterLogisticsServiceServer(s grpc.ServiceRegistrar, srv LogisticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogisticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogisticsService_ServiceDesc, srv)
}

func _LogisticsService_ProcessOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).ProcessOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsService_ProcessOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).ProcessOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_TrackPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).TrackPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsService_TrackPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).TrackPackage(ctx, req.(*TrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_ReportDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).ReportDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsService_ReportDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).ReportDelivery(ctx, req.(*DeliveryReport))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticsService_ServiceDesc is the grpc.ServiceDesc for LogisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.LogisticsService",
	HandlerType: (*LogisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessOrder",
			Handler:    _LogisticsService_ProcessOrder_Handler,
		},
		{
			MethodName: "TrackPackage",
			Handler:    _LogisticsService_TrackPackage_Handler,
		},
		{
			MethodName: "ReportDelivery",
			Handler:    _LogisticsService_ReportDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics.proto",
}
